Traceback (most recent call last):
  File "C:\Users\sayala\AppData\Roaming\Python\Python311\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\sayala\AppData\Roaming\Python\Python311\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\ProgramData\Anaconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\ProgramData\Anaconda3\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\sayala\AppData\Roaming\Python\Python311\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\sayala\AppData\Roaming\Python\Python311\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\sayala\AppData\Roaming\Python\Python311\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# flatten the meshgrid to allow single diode to broadcast the output
curve_info = pvlib.pvsystem.singlediode(
    photocurrent=IL.flatten(),
    saturation_current=I0.flatten(),
    resistance_series=Rs,
    resistance_shunt=Rsh.flatten(),
    nNsVth=nNsVth.flatten(),
    ivcurve_pnts=101,
    method='lambertw')
# display the max power points
curve_info['p_mp']
------------------

----- stderr -----
C:\Users\sayala\Documents\GitHub\pvlib-python\pvlib\pvsystem.py:2484: pvlibDeprecationWarning: 
The pvlib.pvsystem.singlediode parameter ivcurve_pnts was deprecated in pvlib 0.10.0 and will be removed in 0.11.0. Use pvlib.pvsystem.v_from_i and pvlib.pvsystem.i_from_v instead.
  warn_deprecated('0.10.0', name='pvlib.pvsystem.singlediode',
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Cell [1;32mIn[9], line 2[0m
[0;32m      1[0m [38;5;66;03m# flatten the meshgrid to allow single diode to broadcast the output[39;00m
[1;32m----> 2[0m curve_info [38;5;241m=[39m pvlib[38;5;241m.[39mpvsystem[38;5;241m.[39msinglediode(
[0;32m      3[0m     photocurrent[38;5;241m=[39mIL[38;5;241m.[39mflatten(),
[0;32m      4[0m     saturation_current[38;5;241m=[39mI0[38;5;241m.[39mflatten(),
[0;32m      5[0m     resistance_series[38;5;241m=[39mRs,
[0;32m      6[0m     resistance_shunt[38;5;241m=[39mRsh[38;5;241m.[39mflatten(),
[0;32m      7[0m     nNsVth[38;5;241m=[39mnNsVth[38;5;241m.[39mflatten(),
[0;32m      8[0m     ivcurve_pnts[38;5;241m=[39m[38;5;241m101[39m,
[0;32m      9[0m     method[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlambertw[39m[38;5;124m'[39m)
[0;32m     10[0m [38;5;66;03m# display the max power points[39;00m
[0;32m     11[0m curve_info[[38;5;124m'[39m[38;5;124mp_mp[39m[38;5;124m'[39m]

File [1;32m~\Documents\GitHub\pvlib-python\pvlib\pvsystem.py:2494[0m, in [0;36msinglediode[1;34m(photocurrent, saturation_current, resistance_series, resistance_shunt, nNsVth, ivcurve_pnts, method)[0m
[0;32m   2491[0m [38;5;66;03m# Calculate points on the IV curve using the LambertW solution to the[39;00m
[0;32m   2492[0m [38;5;66;03m# single diode equation[39;00m
[0;32m   2493[0m [38;5;28;01mif[39;00m method[38;5;241m.[39mlower() [38;5;241m==[39m [38;5;124m'[39m[38;5;124mlambertw[39m[38;5;124m'[39m:
[1;32m-> 2494[0m     out [38;5;241m=[39m _singlediode[38;5;241m.[39m_lambertw([38;5;241m*[39margs, ivcurve_pnts)
[0;32m   2495[0m     points [38;5;241m=[39m out[:[38;5;241m7[39m]
[0;32m   2496[0m     [38;5;28;01mif[39;00m ivcurve_pnts:

File [1;32m~\Documents\GitHub\pvlib-python\pvlib\singlediode.py:809[0m, in [0;36m_lambertw[1;34m(photocurrent, saturation_current, resistance_series, resistance_shunt, nNsVth, ivcurve_pnts)[0m
[0;32m    803[0m params [38;5;241m=[39m {[38;5;124m'[39m[38;5;124mphotocurrent[39m[38;5;124m'[39m: photocurrent,
[0;32m    804[0m           [38;5;124m'[39m[38;5;124msaturation_current[39m[38;5;124m'[39m: saturation_current,
[0;32m    805[0m           [38;5;124m'[39m[38;5;124mresistance_series[39m[38;5;124m'[39m: resistance_series,
[0;32m    806[0m           [38;5;124m'[39m[38;5;124mresistance_shunt[39m[38;5;124m'[39m: resistance_shunt, [38;5;124m'[39m[38;5;124mnNsVth[39m[38;5;124m'[39m: nNsVth}
[0;32m    808[0m [38;5;66;03m# Compute short circuit current[39;00m
[1;32m--> 809[0m i_sc [38;5;241m=[39m _lambertw_i_from_v([38;5;241m0.[39m, [38;5;241m*[39m[38;5;241m*[39mparams)
[0;32m    811[0m [38;5;66;03m# Compute open circuit voltage[39;00m
[0;32m    812[0m v_oc [38;5;241m=[39m _lambertw_v_from_i([38;5;241m0.[39m, [38;5;241m*[39m[38;5;241m*[39mparams)

File [1;32m~\Documents\GitHub\pvlib-python\pvlib\singlediode.py:757[0m, in [0;36m_lambertw_i_from_v[1;34m(voltage, photocurrent, saturation_current, resistance_series, resistance_shunt, nNsVth)[0m
[0;32m    751[0m conductance_shunt [38;5;241m=[39m [38;5;241m1.[39m [38;5;241m/[39m resistance_shunt
[0;32m    753[0m [38;5;66;03m# Ensure that we are working with read-only views of numpy arrays[39;00m
[0;32m    754[0m [38;5;66;03m# Turns Series into arrays so that we don't have to worry about[39;00m
[0;32m    755[0m [38;5;66;03m#  multidimensional broadcasting failing[39;00m
[0;32m    756[0m V, IL, I0, Rs, Gsh, a [38;5;241m=[39m \
[1;32m--> 757[0m     np[38;5;241m.[39mbroadcast_arrays(voltage, photocurrent, saturation_current,
[0;32m    758[0m                         resistance_series, conductance_shunt, nNsVth)
[0;32m    760[0m [38;5;66;03m# Intitalize output I (V might not be float64)[39;00m
[0;32m    761[0m I [38;5;241m=[39m np[38;5;241m.[39mfull_like(V, np[38;5;241m.[39mnan, dtype[38;5;241m=[39mnp[38;5;241m.[39mfloat64)           [38;5;66;03m# noqa: E741, N806[39;00m

File [1;32m<__array_function__ internals>:200[0m, in [0;36mbroadcast_arrays[1;34m(*args, **kwargs)[0m

File [1;32m~\AppData\Roaming\Python\Python311\site-packages\numpy\lib\stride_tricks.py:540[0m, in [0;36mbroadcast_arrays[1;34m(subok, *args)[0m
[0;32m    533[0m [38;5;66;03m# nditer is not used here to avoid the limit of 32 arrays.[39;00m
[0;32m    534[0m [38;5;66;03m# Otherwise, something like the following one-liner would suffice:[39;00m
[0;32m    535[0m [38;5;66;03m# return np.nditer(args, flags=['multi_index', 'zerosize_ok'],[39;00m
[0;32m    536[0m [38;5;66;03m#                  order='C').itviews[39;00m
[0;32m    538[0m args [38;5;241m=[39m [np[38;5;241m.[39marray(_m, copy[38;5;241m=[39m[38;5;28;01mFalse[39;00m, subok[38;5;241m=[39msubok) [38;5;28;01mfor[39;00m _m [38;5;129;01min[39;00m args]
[1;32m--> 540[0m shape [38;5;241m=[39m _broadcast_shape([38;5;241m*[39margs)
[0;32m    542[0m [38;5;28;01mif[39;00m [38;5;28mall[39m(array[38;5;241m.[39mshape [38;5;241m==[39m shape [38;5;28;01mfor[39;00m array [38;5;129;01min[39;00m args):
[0;32m    543[0m     [38;5;66;03m# Common case where nothing needs to be broadcasted.[39;00m
[0;32m    544[0m     [38;5;28;01mreturn[39;00m args

File [1;32m~\AppData\Roaming\Python\Python311\site-packages\numpy\lib\stride_tricks.py:422[0m, in [0;36m_broadcast_shape[1;34m(*args)[0m
[0;32m    417[0m [38;5;250m[39m[38;5;124;03m"""Returns the shape of the arrays that would result from broadcasting the[39;00m
[0;32m    418[0m [38;5;124;03msupplied arrays against each other.[39;00m
[0;32m    419[0m [38;5;124;03m"""[39;00m
[0;32m    420[0m [38;5;66;03m# use the old-iterator because np.nditer does not handle size 0 arrays[39;00m
[0;32m    421[0m [38;5;66;03m# consistently[39;00m
[1;32m--> 422[0m b [38;5;241m=[39m np[38;5;241m.[39mbroadcast([38;5;241m*[39margs[:[38;5;241m32[39m])
[0;32m    423[0m [38;5;66;03m# unfortunately, it cannot handle 32 or more arguments directly[39;00m
[0;32m    424[0m [38;5;28;01mfor[39;00m pos [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;241m32[39m, [38;5;28mlen[39m(args), [38;5;241m31[39m):
[0;32m    425[0m     [38;5;66;03m# ironically, np.broadcast does not properly handle np.broadcast[39;00m
[0;32m    426[0m     [38;5;66;03m# objects (it treats them as scalars)[39;00m
[0;32m    427[0m     [38;5;66;03m# use broadcasting to avoid allocating the full array[39;00m

[1;31mValueError[0m: shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 1 with shape (28,) and arg 3 with shape (7, 4).

